#!/bin/bash
#
# Yet another Dynamic IP controller - Script to execute
# commands/actions upon WAN IP changes.
#
# Author:	Th. Walrant <yadynip.tgc@walrant.net>
# Date:		May 2014
#
# Detection:

# The tool accepts multiple ways to detect the WAN IP address by
# executing different checkip scripts until an IP address is found
# (See the checkip.d folder for examples of available
# methods/scripts). You can add your own method and/or disable some
# scripts by deleting the script file or by updating the script to
# return/exit without returning an IP address.
#
# Actions:
#
# Once the IP address is detected, the tool check all available
# actions (located in folder actions.d). It executes the action script
# only if the IP address has changed. The IP address is cached per
# action upon succesfull execution of the action, so that the tool is
# able to only repeat the action who failed at the previous attempt.
#
# Action exit status:
# 	20	action is not configured, the execution is silently ignored.
#
# Revisions:
# 2016-09-04 twa	Update logging
#
name=yadynip
installdir=$(dirname $(readlink -f $0))
installdir=${installdir%%/bin}

sharedir=$installdir/share/$name
etcdir=$installdir/etc/$name
config=$installdir/etc/$name.conf

# Default values
verbose=none
logging=none
quiet=off

for conf in $config ~/.$name.conf ./$name.conf; do
    if [ -f $conf ]; then
	    . $conf
    fi
done

ipcachedir=$sharedir/ipcaches
[ "$quiet" == "on" ] && verbose=none
[ -d "$ipcachedir" ] || /bin/mkdir -p $ipcachedir || exit $?

## Get run scripts or programs in a directory, do not execute.
## Similar to run-parts(8)
function runparts()
{
    local dir=$1;
    local regex='[A-Za-z0-9_\-]+$';
    local parts
    [ -n "$2" ] && regex=$2;
    for f in $(/usr/bin/find $dir \( -type f -o -type l \) -regex $dir'/'$regex | sort); do
        [ -x "$f" ] || continue;	# Skip, if not executable.
        parts="$parts $f";
    done
    /bin/echo $parts;
}

## Return last IP of given type
function lastip()
{
    local lastip=""
    [ -n "$1" ] && [ -f "$ipcachedir/$1" ] && \
        lastip=$(/bin/cat "$ipcachedir/$1");
    /bin/echo $lastip;
}

## Log message to file and stdout, if required by config.
function yalog()
{
    local cmd=$1; shift
    local output=false

    # Check commands
    case ${cmd,,} in
        cha*|err*|act*|deb*) ;;
        *) /bin/echo ERROR: Unexpected yalog command: $cmd ;;
    esac

    # Report to stdout, if required.
    case ${verbose,,} in
        on)
            # Report error or change
            [[ ${cmd,,} =~ ^cha ]] && output=true
            [[ ${cmd,,} =~ ^err ]] && output=true
            ;;
        deb*)
            # Report all
            output=true
            ;;
    esac

    $output && /bin/echo "$*" | /bin/sed 's/^/['$name'] /'

    # No log file, abort here.
    [ -z "$logfile" ] && return;

    # Reset output flag
    output=false

    # Log to file, if required.
    case ${logging,,} in
        low|on)
            # Log change only
            [[ ${cmd,,} =~ ^cha ]] && output=true
            ;;
        med*)
            # Log error or change
            [[ ${cmd,,} =~ ^cha ]] && output=true
            [[ ${cmd,,} =~ ^err ]] && output=true
            ;;
        all|deb*|hi*)
            # Log all
            output=true
            ;;
    esac

    $output && /bin/echo "$*" | /bin/sed 's/^/'"$(/bin/date -R)"': /' >> $logfile
}

## Get my WAN IP address using available checkip scripts
wanip=
for part in $(runparts $etcdir/checkip.d); do
    yalog action Running $part
    wanip=$($part)
    [ -n "$wanip" ] && break;
done

## Stop here if no WAN IP Address is found
[ -z "$wanip" ] && yalog change "WAN IP Address not found" && exit;

## Record and log new WAN IP, if applicable.
lastip=$(lastip $name)
[ "$wanip" != "$lastip" ] && \
    yalog change "WAN IP changed: $wanip" && \
    /bin/echo $wanip > $ipcachedir/$name

## Perform actions with detected IP address
for part in $(runparts $etcdir/actions.d); do
    # Get and check last known IP address for this action
    lastip=$(lastip $(basename $part))

    # Skip this action if no new IP address
    [ "$lastip" == "$wanip" ] && continue

    # Execute the action(wanip), abort upon error.
    yalog action Running $part $wanip

    log=$($part $wanip)
    status=$?

    [ -n "$log" ] && yalog action "$log"

    # Action exit value 20 means unconfigured, hence silently ignored.
    [ $status -ne 0 ] && [ $status -ne 20 ] && \
        yalog error ERROR: $part returned $status
    [ $status -ne 0 ] && continue

    # Update known IP address for this action
    /bin/echo $wanip > $ipcachedir/$(basename $part)

    yalog debug Updating $ipcachedir/$(basename $part) with $wanip
done

exit 0
