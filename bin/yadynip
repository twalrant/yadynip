#!/bin/bash
#
# Yet another Dynamic IP controller - Script to execute
# commands/actions upon WAN IP changes.
#
# Author:	Th. Walrant <yadynip.tgc@walrant.net>
# Date:		May 2014
#
# Detection:

# The tool accepts multiple ways to detect the WAN IP address by
# executing different checkip scripts until an IP address is found
# (See the checkip.d folder for examples of available
# methods/scripts). You can add your own method and/or disable some
# scripts by deleting the script file or by updating the script to
# return/exit without returning an IP address.
#
# Actions:
#
# Once the IP address is detected, the tool check all available
# actions (located in folder actions.d). It executes the action script
# only if the IP address has changed. The IP address is cached per
# action upon succesfull execution of the action, so that the tool is
# able to only repeat the action who failed at the previous attempt.
#
name=yadynip
installdir=$(dirname $(readlink -f $0))
installdir=${installdir%%/bin}

sharedir=$installdir/share/$name
etcdir=$installdir/etc/$name
config=$installdir/etc/$name.conf

# Default values
verbose=none
logging=none
quiet=off

for conf in $config ~/.$name.conf ./$name.conf; do
    if [ -f $conf ]; then
	. $conf
    fi
done

ipcachedir=$sharedir/ipcaches
[ "$quiet" == "on" ] && verbose=none
[ -d "$ipcachedir" ] || /bin/mkdir -p $ipcachedir || exit $?

## Get run scripts or programs in a directory, do not execute.
## Similar to run-parts(8)
function runparts()
{
    local dir=$1;
    local regex='[A-Za-z0-9_\-]+$';
    local parts
    [ -n "$2" ] && regex=$2;
    for f in $(/usr/bin/find $dir -type f -regex $dir'/'$regex | sort); do
        [ -x "$f" ] || continue;	# Skip, if not executable.
        parts="$parts $f";
    done
    /bin/echo $parts;
}

## Return last IP of given type
function lastip()
{
    local lastip=""
    [ -n "$1" ] && [ -f "$ipcachedir/$1" ] && \
        lastip=$(/bin/cat "$ipcachedir/$1");
    /bin/echo $lastip;
}

## Log message if required by config.
function log()
{
    local level=$1; shift;

    # If verbose output to console according to selected level
    # verbose levels: none, verbose or debug
    if [ "$verbose" != "none" ]; then
        # $verbose = debug -> output
        # $level != debug -> output
        [ "$verbose" == "debug" ] || [ $level != "debug" ] && \
            /bin/echo "[$name] "$*
    fi

    # No log file, abort here.
    [ -z "$logfile" ] && return;

    # If logging output to log-file according to selected level
    # logging levels: none, verbose or debug
    if [ "$logging" != "none" ]; then
        # $logging = debug -> output
        # $level != debug -> output
        [ "$logging" == "debug" ] || [ $level != "debug" ] && \
            /bin/echo $(date -R)": "$* >> $logfile
    fi
}

## Log a logfile content if required by config.
function logfile()
{
    local now=$(date -R)

    # No log file, abort here.
    [ -z "$logfile" ] && return;
    [ "$logging" == "debug" ] || return;

    /bin/sed 's/^/'"$(date -R)"': /' $1 >> $logfile
}

## Get my WAN IP address using available checkip scripts
wanip=
for part in $(runparts $etcdir/checkip.d); do
    log debug Running $part
    wanip=$($part)
    [ -n "$wanip" ] && break;
done

## Stop here if no WAN IP Address is found
[ -z "$wanip" ] && log debug "No WAN IP Address found" && exit;

## Record and log new WAN IP, if applicable.
lastip=$(lastip $name)
[ "$wanip" != "$lastip" ] && \
    log verbose "WAN IP changed: $wanip" && \
    /bin/echo $wanip > $ipcachedir/$name

## Perform actions with detected IP address
for part in $(runparts $etcdir/actions.d); do
    # Get and check last known IP address for this action
    lastip=$(lastip $(basename $part))

    # Skip this action if no new IP address
    [ "$lastip" == "$wanip" ] && continue

    # Execute the action(wanip), abort upon error.
    log debug Running $part $wanip
    log=$(mktemp)
    $part $wanip > $log	# Log to file (tried to var, but didn't work
                        # with multi-lines output)
    status=$?
    [ -s "$log" ] && logfile $log	# Use log if not empty
    /bin/rm -f $log
    [ $status -ne 0 ] && continue

    # Update known IP address for this action
    /bin/echo $wanip > $ipcachedir/$(basename $part)
done
